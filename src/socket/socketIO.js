import { Server } from 'socket.io';
import * as chatService from '../services/chatService.js';
import {ChatRoom, ChatRoomExit} from "../models/chat.js";
import * as userService from "../services/userService.js";
import * as onlineStatusService from '../services/onlineStatusService.js';
import mongoose from "mongoose";
import crypto from 'crypto';

export let io;

export const initializeSocket = (server) => {
    io = new Server(server, { cors: { origin: '*' } });

    io.on('connection', (socket) => {
        console.log('üîó ÏÉàÎ°úÏö¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞Îê®:', socket.id);

        const registeredUsers = new Set();

        socket.on('register', (userId) => {
            if (!userId || typeof userId !== 'string' || userId.trim() === '') {
                console.warn('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ userId:', userId);
                socket.emit('registrationFailed', { error: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê ID' });
                return;
            }

            if (registeredUsers.has(`${socket.id}-${userId}`)) return;
            registeredUsers.add(`${socket.id}-${userId}`);
            socket.join(userId);

            onlineStatusService.setUserOnlineStatus(userId, socket.id, true);
            io.emit('userStatusChanged', {
                userId,
                isOnline: true,
                timestamp: new Date()
            });

            console.log(`ÏÇ¨Ïö©Ïûê ${userId} Îì±Î°ùÎê® (socket: ${socket.id})`);
        });

        // ‚úÖ Ï±ÑÌåÖÎ∞© Ï∞∏Í∞Ä - roomTypeÏóê Îî∞Îùº Íµ¨Î∂Ñ Ï≤òÎ¶¨
        socket.on('joinRoom', async (roomId, roomType = 'random') => {
            socket.join(roomId);
            console.log(`üìå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ${socket.id}Í∞Ä Î∞© ${roomId}Ïóê Ï∞∏Í∞Ä (ÌÉÄÏûÖ: ${roomType})`);

            try {
                const chatRoom = await ChatRoom.findById(roomId);
                if (!chatRoom) {
                    console.log("Ï±ÑÌåÖÎ∞©ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
                    return;
                }

                const exited = await ChatRoomExit.distinct('user', { chatRoom: roomId });
                const activeUsers = chatRoom.chatUsers.filter(u =>
                    !exited.some(id => id.equals(u))
                );

                const eventData = {
                    roomId: roomId,
                    roomType: roomType,
                    chatUsers: chatRoom.chatUsers,
                    activeUsers,
                    capacity: chatRoom.capacity,
                };

                if (roomType === 'friend') {
                    socket.emit('friendRoomJoined', eventData);
                } else if (roomType === 'random') {
                    io.to(roomId).emit('roomJoined', eventData);
                }

            } catch (error) {
                console.error("Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:", error);
            }
        });

        // Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨ Ïù¥Î≤§Ìä∏
        socket.on('markAsRead', async ({ roomId, userId }, callback) => {
            try {
                const result = await chatService.markMessagesAsRead(roomId, userId);
                socket.to(roomId).emit('messagesRead', {
                    roomId,
                    userId,
                    readCount: result.modifiedCount
                });
                callback({ success: true, readCount: result.modifiedCount });
            } catch (error) {
                console.error('Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
                callback({ success: false, error: error.message });
            }
        });

        // üí¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïù¥Î≤§Ìä∏ - ÎèôÍ∏∞ Ï†ÄÏû• Î∞©Ïãù (ÏïàÏ†ïÏ†Å)
        socket.on("sendMessage", async ({ chatRoom, sender, text, roomType = 'random' }, callback) => {
            try {
                const senderId = typeof sender === "object" ? sender._id : sender;
                const senderObjId = new mongoose.Types.ObjectId(senderId);

                console.log(`üì§ [Î©îÏãúÏßÄÏ†ÑÏÜ°] ÏãúÏûë: "${text.substring(0, 20)}..." (Î∞©: ${chatRoom})`);

                // 1. Î∞úÏã†Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå (wordFilterEnabled Ìè¨Ìï®)
                const senderUser = await userService.getUserById(senderId);
                const senderNick = senderUser ? senderUser.nickname : "Ïïå Ïàò ÏóÜÏùå";
                
                // 2. DB Ï†ÄÏû• (ÏõêÎ≥∏ text Ï†ÑÎã¨)
                const savedMessage = await chatService.saveMessage(chatRoom, senderId, text, {
                    platform: 'socket',
                    userAgent: 'realtime-chat',
                    ipHash: socket.handshake.address ?
                        crypto.createHash('sha256').update(socket.handshake.address).digest('hex').substring(0, 16) : null
                });

                console.log(`‚úÖ [Î©îÏãúÏßÄÏ†ÄÏû•] ÏôÑÎ£å: ${savedMessage._id} (${savedMessage.isEncrypted ? 'ÏïîÌò∏Ìôî' : 'ÌèâÎ¨∏'})`);

                // 3. Ïã§Ï†ú Ï†ÄÏû•Îêú Î©îÏãúÏßÄÎ°ú Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ± (ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©)
                const messageToSend = {
                    _id: savedMessage._id, // ‚úÖ Ïã§Ï†ú DB ID ÏÇ¨Ïö©
                    chatRoom,
                    sender: { _id: senderId, id: senderId, nickname: senderNick },
                    text: text, // ‚úÖ ÏõêÎ≥∏ ÌÖçÏä§Ìä∏Î•º Í∑∏ÎåÄÎ°ú Ï†ÑÏÜ°
                    textTime: savedMessage.textTime || new Date(),
                    isEncrypted: savedMessage.isEncrypted,
                    roomType: roomType,
                    readBy: savedMessage.readBy || [{ user: senderId, readAt: new Date() }],
                    isDeleted: false,
                    createdAt: savedMessage.createdAt
                };

                // 4. Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î©îÏãúÏßÄ Ï†ÑÏÜ°
                io.to(chatRoom).emit("receiveMessage", messageToSend);
                console.log(`üì® [Î©îÏãúÏßÄÏ†ÑÏÜ°] ÏôÑÎ£å: ${savedMessage._id} ‚Üí Î∞© ${chatRoom}`);

                // 5. Í∞úÏù∏ ÏïåÎ¶º Ï†ÑÏÜ° (ÏõêÎ≥∏ ÌÖçÏä§Ìä∏Î°ú Ï†ÑÏÜ°)
                const roomDoc = await ChatRoom.findById(chatRoom);
                const exitedUsers = await ChatRoomExit.distinct("user", { chatRoom });
                const targets = roomDoc.chatUsers.filter(uid =>
                    !uid.equals(senderObjId) &&
                    !exitedUsers.some(ex => ex.equals(uid))
                );

                targets.forEach(uid => {
                    io.to(uid.toString()).emit("chatNotification", {
                        chatRoom,
                        roomType: roomType,
                        message: messageToSend, // ÏïåÎ¶º ÌÅ¥Î¶≠ Ïãú ÌïÑÏöîÌïú ÏõêÎ≥∏ Î©îÏãúÏßÄ
                        notification: `${senderNick}: ${text}`,
                        timestamp: new Date()
                    });
                });

                // 6. ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å ÏÑ±Í≥µ ÏùëÎãµ
                callback({
                    success: true,
                    message: messageToSend,
                    encryptionEnabled: process.env.CHAT_ENCRYPTION_ENABLED === 'true'
                });

            } catch (err) {
                console.error("‚ùå [Î©îÏãúÏßÄÏ†ÑÏÜ°] Ïò§Î•ò:", err);
                callback({ success: false, error: err.message });
            }
        });

        socket.on("deleteMessage", ({ messageId, roomId }) => {
            socket.to(roomId).emit("messageDeleted", { messageId });
        });

        // ‚úÖ Î∞© ÎÇòÍ∞ÄÍ∏∞ - roomTypeÏóê Îî∞Îùº Íµ¨Î∂Ñ Ï≤òÎ¶¨
        socket.on('leaveRoom', async ({ roomId, userId, roomType = 'random' }) => {
            socket.leave(roomId);

            try {
                const room = await ChatRoom.findById(roomId).select('status');
                const isWaiting = room?.status === 'waiting';

                if (isWaiting) {
                    if (roomType === 'friend') {
                        io.to(roomId).emit('friendWaitingLeft', { userId, roomId });
                    } else {
                        io.to(roomId).emit('waitingLeft', { userId, roomId });
                    }
                    return;
                }

                if (roomType === 'friend') {
                    io.to(roomId).emit('friendUserLeft', { userId, roomId });
                } else {
                    io.to(roomId).emit('userLeft', { userId, roomId });

                    const user = await userService.getUserById(userId);
                    const nickname = user ? user.nickname : 'Ïïå Ïàò ÏóÜÏùå';
                    const sysText = `${nickname} ÎãòÏù¥ Ìá¥Ïû•ÌñàÏäµÎãàÎã§.`;
                    const saved = await chatService.saveSystemMessage(roomId, sysText);

                    io.to(roomId).emit('systemMessage', {
                        ...saved.toObject(),
                        sender: { _id: 'system', nickname: 'SYSTEM' }
                    });
                }
            } catch (error) {
                console.error('Î∞© ÎÇòÍ∞ÄÍ∏∞ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
            }
        });

        socket.on('disconnect', () => {
            console.log('‚ùå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú:', socket.id);

            const userId = onlineStatusService.findUserBySocketId(socket.id);
            if (userId) {
                onlineStatusService.setUserOnlineStatus(userId, null, false);
                io.emit('userStatusChanged', {
                    userId,
                    isOnline: false,
                    timestamp: new Date()
                });
            }
        });
    });

    return io;
};


// ============================================================================
// üÜï ÏπúÍµ¨ Í¥ÄÍ≥Ñ Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º Ìó¨Ìçº Ìï®Ïàò
// ============================================================================

/**
 * ÏπúÍµ¨ Ï∂îÍ∞Ä ÏïåÎ¶º Ï†ÑÏÜ°
 * @param {string} userId - ÏπúÍµ¨ Ï∂îÍ∞ÄÌïú ÏÇ¨Ïö©Ïûê ID
 * @param {string} friendId - Ï∂îÍ∞ÄÎêú ÏπúÍµ¨ ID
 * @param userInfo
 * @param {Object} friendData - ÏπúÍµ¨ Ï†ïÎ≥¥ ({ _id, nickname, profilePhoto, ... })
 */
export const emitFriendAdded = (userId, friendId, userInfo, friendData) => {
    if (!io) {
        console.warn('‚ö†Ô∏è Socket.IOÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
    }

    // ÏπúÍµ¨ Ï∂îÍ∞ÄÌïú ÏÇ¨ÎûåÏóêÍ≤å ÏïåÎ¶º
    io.to(userId).emit('friendAdded', {
        friend: friendData,
        timestamp: new Date()
    });

    // Ï∂îÍ∞ÄÎêú ÏπúÍµ¨ÏóêÍ≤åÎèÑ ÏïåÎ¶º
    io.to(friendId).emit('friendAdded', {
        friend: userInfo, // userIdÎäî Î∞òÎåÄÌé∏ Ï†ïÎ≥¥
        timestamp: new Date()
    });

    console.log(`üë• [Socket] ÏπúÍµ¨ Ï∂îÍ∞Ä ÏïåÎ¶º: ${userId} ‚Üî ${friendId}`);
};

/**
 * ÏπúÍµ¨ ÏÇ≠Ï†ú ÏïåÎ¶º Ï†ÑÏÜ°
 * @param {string} userId - ÏπúÍµ¨ ÏÇ≠Ï†úÌïú ÏÇ¨Ïö©Ïûê ID
 * @param {string} friendId - ÏÇ≠Ï†úÎêú ÏπúÍµ¨ ID
 */
export const emitFriendDeleted = (userId, friendId) => {
    if (!io) {
        console.warn('‚ö†Ô∏è Socket.IOÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
    }

    // ÏñëÏ™Ω Î™®ÎëêÏóêÍ≤å ÏïåÎ¶º
    io.to(userId).emit('friendDeleted', {
        friendId: friendId,
        timestamp: new Date()
    });

    io.to(friendId).emit('friendDeleted', {
        friendId: userId,
        timestamp: new Date()
    });

    console.log(`üóëÔ∏è [Socket] ÏπúÍµ¨ ÏÇ≠Ï†ú ÏïåÎ¶º: ${userId} ‚Üî ${friendId}`);
};

/**
 * ÏÇ¨Ïö©Ïûê Ï∞®Îã® ÏïåÎ¶º Ï†ÑÏÜ°
 * @param {string} blockerId - Ï∞®Îã®Ìïú ÏÇ¨Ïö©Ïûê ID
 * @param {string} blockedId - Ï∞®Îã®ÎãπÌïú ÏÇ¨Ïö©Ïûê ID
 */
export const emitFriendBlocked = (blockerId, blockedId) => {
    if (!io) {
        console.warn('‚ö†Ô∏è Socket.IOÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
    }

    // Ï∞®Îã®ÎãπÌïú ÏÇ¨ÎûåÏóêÍ≤åÎßå ÏïåÎ¶º (Ï∞®Îã®Ìïú ÏÇ¨ÎûåÏùÄ Ïù¥ÎØ∏ UIÏóêÏÑú Ï≤òÎ¶¨)
    io.to(blockedId).emit('friendBlocked', {
        blockerId: blockerId,
        timestamp: new Date()
    });

    console.log(`üö´ [Socket] Ï∞®Îã® ÏïåÎ¶º: ${blockerId} ‚Üí ${blockedId}`);
};

/**
 * Ï∞®Îã® Ìï¥Ï†ú ÏïåÎ¶º Ï†ÑÏÜ°
 * @param {string} unblockerId - Ï∞®Îã® Ìï¥Ï†úÌïú ÏÇ¨Ïö©Ïûê ID
 * @param {string} unblockedId - Ï∞®Îã® Ìï¥Ï†úÎêú ÏÇ¨Ïö©Ïûê ID
 */
export const emitFriendUnblocked = (unblockerId, unblockedId) => {
    if (!io) {
        console.warn('‚ö†Ô∏è Socket.IOÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
    }

    // Ï∞®Îã® Ìï¥Ï†úÎêú ÏÇ¨ÎûåÏóêÍ≤å ÏïåÎ¶º
    io.to(unblockedId).emit('friendUnblocked', {
        unblockerId: unblockerId,
        timestamp: new Date()
    });

    console.log(`‚úÖ [Socket] Ï∞®Îã® Ìï¥Ï†ú ÏïåÎ¶º: ${unblockerId} ‚Üí ${unblockedId}`);
};